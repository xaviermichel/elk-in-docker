input {
	tcp {
		type => "nginx_with_cache"
		port => 5000
	}
}

filter {
	if [type] == "nginx_with_cache" {
		grok {
			match => { 
				"message" => "%{IPORHOST:remote_addr} %{USERNAME:remote_user} - \[%{HTTPDATE:time_local}\] \"%{WORD:verb} %{NOTSPACE:request} HTTP/%{NUMBER:httpversion}\" %{INT:status} %{INT:body_bytes_sent:int} %{QS:http_referer};? %{QS:http_user_agent} upstream_addr=\"%{NOTSPACE:upstream_addr}\" upstream_status=\"%{NOTSPACE:upstream_status}\" upstream_responsse_time=\"%{NOTSPACE:upstream_response_time}\" cache=\"%{NOTSPACE:upstream_cache_status}\""	
			}
		}
		date {
			match => [ "time_local" , "dd/MMM/YYYY:HH:mm:ss Z" ]
		}

		if [upstream_response_time] == "-" {
			mutate { 
				add_field => { "served_by" => "front" }
				remove_field => ["upstream_response_time"] 
			}
		} else {
			mutate { 
				add_field => { "served_by" => "middle" }
				convert => { "upstream_response_time" => "float" }
			}
		}

		#if "?" in [request] {
		#	mutate {
		#		add_field => { "splitted_request" => "%{request}" }
		#		split => { 
		#			"splitted_request" => "?"
		#			add_field => {
		#				"request_without_args" => "%{splitted_request[0]}"
		#				"request_args" => "%{splitted_request[1]}"
		#			}
		#		}
		#	}
		#} else {
		#	mutate {
		#		add_field => ["request_without_args", "%{request}" ]
		#		add_field => ["request_args", "" ]
		#	}
		#}

		geoip {
			source => "remote_addr"
		}
	}
}

output {
	stdout {
		codec => rubydebug
	}
	elasticsearch {
		hosts => ["elasticsearch:9200"]
	}
}
