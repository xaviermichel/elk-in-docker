input {
	tcp {
		type => "nginx_conf_refonte"
		port => 5000
	}
}

filter {
	if [type] == "nginx_conf_refonte" {

		grok {
			match => { 
				"message" => "%{IPORHOST:remote_addr} %{USERNAME:remote_user} - \[%{HTTPDATE:time_local}\] \"%{WORD:verb} %{NOTSPACE:request} HTTP/%{NUMBER:httpversion}\" %{INT:status} %{INT:body_bytes_sent:int} %{QS:http_referer};? %{QS:http_user_agent} upstream_addr=\"%{NOTSPACE:upstream_addr}\" upstream_status=\"%{NOTSPACE:upstream_status}\" upstream_responsse_time=\"%{NOTSPACE:upstream_response_time}\" cache=\"%{NOTSPACE:upstream_cache_status}\""	
			}
		}
		
		#
		# request to skip
		#
		if [request] == "/.Xadmin/upstream-status" {
			drop { }
		}
		if [request] == "//.surveillance.txt" {
			drop { }
		}
		if [request] == "/url/console/version.json" {
			drop { }
		}
		
		#
		# extract log date
		#
		date {
			match => [ "time_local" , "dd/MMM/YYYY:HH:mm:ss Z" ]
		}

		#
		# remove upstream_response_time if it's empty, or cast it to float
		#
		if [upstream_response_time] == "-" {
			mutate { 
				add_field => { "served_by" => "front" }
				remove_field => ["upstream_response_time"] 
			}
		} else {
			mutate { 
				add_field => { "served_by" => "middle" }
				convert => { "upstream_response_time" => "float" }
			}
		}
		
		#
		# tag upstream backend
		#
		if [upstream_addr] != "-" {
			mutate { 
				add_field => { "upstream_addr_2" => "%{upstream_addr}" } 
			}
			mutate {	
				split =>  {
					"upstream_addr_2" => ":" 
				}
			}
			mutate {
				add_field => {
					"upstream_addr_host" => "%{upstream_addr_2[0]}"
					"upstream_addr_port" => "%{upstream_addr_2[1]}"
				}
			}
			
			if [upstream_addr_port] == "9000" { 
				mutate { 
					add_field => { "upstream_type" => "wordpress" } 
				}
			} else if [upstream_addr_port] == "9056" { 
				mutate { 
					add_field => { "upstream_type" => "prerender" } 
				}
			} else if [upstream_addr_port] == "9067" { 
				mutate { 
					add_field => { "upstream_type" => "bosuggestions" } 
				}
			} else if [upstream_addr_port] == "9053" { 
				mutate { 
					add_field => { "upstream_type" => "shorturl" } 
				}
			} else if [upstream_addr_port] == "9066" { 
				mutate { 
					add_field => { "upstream_type" => "cityinfo" } 
				}
			} else if [upstream_addr_port] == "9068" { 
				mutate { 
					add_field => { "upstream_type" => "proxy" } 
				}
			} else {
				mutate { 
					add_field => { "upstream_type" => "inconnu_du_filtre_logstash" } 
				}
			}
		}

		#
		# split request into path / args
		#
		if "?" in [request] {
			mutate { 
				add_field => { "request_2" => "%{request}" } 
			}
			mutate {	
				split =>  {
					"request_2" => "?" 
				}
			}
			mutate {
				add_field => {
					"request_path" => "%{request_2[0]}"
					"request_args" => "%{request_2[1]}"
				}
			}
		} else {
			mutate {
				add_field => {
					"request_path" => "%{request}"
					"request_args" => ""
				}
			}
		}

		#
		# check if the request path is a static type
		#
		if [request_path] =~ /.(css|js|jpg|jpeg|gif|ico|png|bmp|pict|csv|doc|pdf|pls|ppt|tif|tiff|eps|ejs|swf|midi|mid|ttf|eot|woff|otf|svg|svgz|webp|docx|xlsx|xls|pptx|ps|woff2)$/ { 
			mutate { 
				add_field => { "static_resource" => true } 
			}
		} else {
			mutate { 
				add_field => { "static_resource" => false } 
			}
		}
		mutate {
			convert => { "static_resource" => "boolean" }
		}

		#
		# extract user agent informations
		#
		useragent {
			source => "http_user_agent"
		}

		#
		# tag admin request for security check
		#
		if [request_path] =~ /^\/admin/ { 
			mutate { 
				add_field => { "admin_request" => true } 
			}
		} else {
			mutate { 
				add_field => { "admin_request" => false } 
			}
		}
		mutate {
			convert => { "admin_request" => "boolean" }
		}

		#
		# extract remote user geo-location
		#
		geoip {
			source => "remote_addr"
		}
	}
}

output {
	#stdout {
	#	codec => rubydebug
	#}
	elasticsearch {
		hosts => ["elasticsearch:9200"]
	}
}
